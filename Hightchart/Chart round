// Uncomment to style it like Apple Watch
/*
if (!Highcharts.theme) {
    Highcharts.setOptions({
        chart: {
            backgroundColor: 'black'
        },
        colors: ['#F62366', '#9DFF02', '#0CCDD6'],
        title: {
            style: {
                color: 'silver'
            }
        },
        tooltip: {
            style: {
                color: 'silver'
            }
        }
    });
}
// */

/**
 * In the chart render event, add icons on top of the circular shapes
 */
function renderIcons() {

  // Move icon
  if (!this.series[0].icon) {
    this.series[0].icon = this.renderer.path(['M', -8, 0, 'L', 8, 0, 'M', 0, -8, 'L', 8, 0, 0, 8])
      .attr({
        stroke: '#303030',
        'stroke-linecap': 'round',
        'stroke-linejoin': 'round',
        'stroke-width': 2,
        zIndex: 10
      })
      .add(this.series[2].group);
  }
  this.series[0].icon.translate(
    this.chartWidth / 2 - 10,
    this.plotHeight / 2 - this.series[0].points[0].shapeArgs.innerR -
    (this.series[0].points[0].shapeArgs.r - this.series[0].points[0].shapeArgs.innerR) / 2
  );

  // Exercise icon
  if (!this.series[1].icon) {
    this.series[1].icon = this.renderer.path(
        ['M', -8, 0, 'L', 8, 0, 'M', 0, -8, 'L', 8, 0, 0, 8,
          'M', 8, -8, 'L', 16, 0, 8, 8
        ]
      )
      .attr({
        stroke: '#ffffff',
        'stroke-linecap': 'round',
        'stroke-linejoin': 'round',
        'stroke-width': 2,
        zIndex: 10
      })
      .add(this.series[2].group);
  }
  this.series[1].icon.translate(
    this.chartWidth / 2 - 10,
    this.plotHeight / 2 - this.series[1].points[0].shapeArgs.innerR -
    (this.series[1].points[0].shapeArgs.r - this.series[1].points[0].shapeArgs.innerR) / 2
  );

  // Stand icon
  if (!this.series[2].icon) {
    this.series[2].icon = this.renderer.path(['M', 0, 8, 'L', 0, -8, 'M', -8, 0, 'L', 0, -8, 8, 0])
      .attr({
        stroke: '#303030',
        'stroke-linecap': 'round',
        'stroke-linejoin': 'round',
        'stroke-width': 2,
        zIndex: 10
      })
      .add(this.series[2].group);
  }

  this.series[2].icon.translate(
    this.chartWidth / 2 - 10,
    this.plotHeight / 2 - this.series[2].points[0].shapeArgs.innerR -
    (this.series[2].points[0].shapeArgs.r - this.series[2].points[0].shapeArgs.innerR) / 2
  );
}

var chartRpm = Highcharts.chart('container', {

  chart: {
    type: 'solidgauge',
    height: '110%',

  },

  title: {
    text: 'Activity',
    style: {
      fontSize: '24px'
    }
  },

  tooltip: {
    borderWidth: 0,
    backgroundColor: 'none',
    shadow: false,
    style: {
      fontSize: '16px'
    },
    pointFormat: '{series.name}<br><span style="font-size:2em; color: {point.color}; font-weight: bold">{point.y}%</span>',
    positioner: function(labelWidth) {
      return {
        x: (this.chart.chartWidth - labelWidth) / 2,
        y: (this.chart.plotHeight / 2) + 15
      };
    }
  },

  pane: {
    startAngle: 0,
    endAngle: 360,
    background: [{ // Track for Move
      outerRadius: '90%',
      innerRadius: '88%',
      backgroundColor: '#009CE8', 
/*       backgroundColor: { 
      linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 }, 
      stops: 
      }, */
      borderWidth: 0
    }, { // Track for Exercise
      outerRadius: '84%',
      innerRadius: '60%',
      backgroundColor: 'white',
      borderWidth: 0
    }]
  },

  yAxis: {
    stops: [
      [0.1, '#00E9E1'],
      [0.8, '#009CE8'],
      [0.9, '#0013E9']
    ],
    min: 0,
    max: 100,
    lineWidth: 0,
    tickPositions: []
  },

  plotOptions: {
    solidgauge: {
      dataLabels: {
        y: -15,
        borderWidth: 0,
        useHTML: true
      },
      linecap: 'round',
      stickyTracking: false,
    }
  },


  series: [{
    name: 'Exercise',
    data: [{
      color: Highcharts.getOptions().colors[1],
      radius: '84%',
      innerRadius: '60%',
      y: 65
    }],
    dataLabels: {
      format: '<span style="font-size:17px; color: {point.color}; font-weight: bold">{point.y} %</span>'
    }
  }]
});

setInterval(function () {
    // Speed
    var background,background2,point,newVal,color,inc;

    if (chartRpm) {
        point = chartRpm.series[0].points[0];
        background = chartRpm.pane[0].options.background[0].backgroundColor;
        background2 = chartRpm.pane[0];
        newVal = Math.floor(Math.random() * 100) + 1;
        point.update(newVal);
        color = point.color;
  
        //background.attr({ backgroundColor: '#000000' });
				//background('#000');
                  console.log("point",background);
       //chartRpm.redraw();
        console.log("color",color);
        console.log("point",point);
       console.log("background",background);
         console.log("background2",background2);
         
    }
}, 4000);
